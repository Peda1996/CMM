<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<project default="build" name="CMM">
<!-- https://de.wikipedia.org/wiki/Apache_Ant -->
    <property name="build.classes" value="bin"/>
    <property name="build.lib" value="lib"/>
    <property name="java.dir" value="src"/>
    <property name="jtests.dir" value="jtests"/>
    <property name="error.dir" value="error"/>
    <property name="clib.dir" value="clib"/>
    <property name="translation.dir" value="po"/>
    <property name="name" value="CMM"/>
    <property name="manifest" value="manifest.txt"/>
    <property name="coco-ant.file" value="${java.dir}/at/jku/ssw/cmm/compiler/CMM.atg"/>
    <property name="flex-ccompact.file" value="${java.dir}/at/jku/ssw/cmm/gui/init/CCompactTokenMaker.flex"/>
    <property name="java-flex-ccompact.file" value="${java.dir}/at/jku/ssw/cmm/gui/init/CCompactTokenMaker.java"/>

    <path id="classpath.base">
        <pathelement location="${build.lib}/rsyntaxtextarea.jar"/>
    </path>
    
    <path id="classpath.test">
        <pathelement location="${build.lib}/junit-4.12.jar"/>
        <pathelement location="${build.classes}" />
        <pathelement location="${build.classes}/${jtests.dir}" /> 
        <path refid="classpath.base" />
    </path>

    <!-- clean project and then build it from scratch -->
    <target name="all" depends="clean, build, test" description="build project from scrach"/>

    <!-- check if coco-files changed -->
    <target name="test.if.coco" >
        <!-- TODO merge the 2. uptodate together if possible -->
        <condition property="test.coco">
            <and>
                <uptodate property="test.coco" targetfile="${java.dir}/at/jku/ssw/cmm/compiler/Parser.java">
                    <srcfiles dir="${java.dir}/at/jku/ssw/cmm/compiler/">
                        <include name="CMM.atg"/>
                        <include name="*.frame"/>
                    </srcfiles>
                </uptodate>
                <uptodate property="test.coco" targetfile="${java.dir}/at/jku/ssw/cmm/compiler/Scanner.java">
                    <srcfiles dir="${java.dir}/at/jku/ssw/cmm/compiler/">
                        <include name="CMM.atg"/>
                        <include name="*.frame"/>
                    </srcfiles>
                </uptodate>
            </and>
        </condition>
    </target>
    
    <!-- generate parser and scanner from CMM.atg, using cocoj -->
    <target name="coco" unless="test.coco" depends="test.if.coco" description="generate Parser.java and Scanner.java from CMM.atg">
        <exec executable="cocoj" failonerror="true">
            <arg value="${coco-ant.file}"/>
        </exec>
    </target>

    <!-- check if flex-files changed -->
    <target name="test.if.flex" >
        <condition property="test.flex">
            <uptodate property="isUpToDate"
                srcfile="${java.dir}/at/jku/ssw/cmm/gui/init/CCompactTokenMaker.flex"
                targetfile="${java.dir}/at/jku/ssw/cmm/gui/init/CCompactTokenMaker.java"/>
        </condition>
    </target>
    
    <!-- generate CCompactTokenMaker.java from CCompactTokenMaker.flex, using jflex -->
    <target name="flex" unless="test.flex" depends="test.if.flex" description="generate CCompactTokenMaker.java from CCompactTokenMaker.flex">
        <exec executable="jflex" failonerror="true">
            <arg value="${flex-ccompact.file}"/>
        </exec>
        
        <!-- remove functions which are generating errors -->
        <exec executable="sed" failonerror="true">
            <arg value="-i"/>
            <arg value="s/public final void yyreset(java.io.Reader reader)/public final void yyreset_old(java.io.Reader reader)/g"/>
            <arg value="${java-flex-ccompact.file}"/>
        </exec>
        <exec executable="sed" failonerror="true">
            <arg value="-i"/>
            <arg value="s/private boolean zzRefill() throws java.io.IOException/private boolean zzRefill_old() throws java.io.IOException/g"/>
            <arg value="${java-flex-ccompact.file}"/>
        </exec>
    </target>

    <!-- build project -->
    <target name="build" depends="coco, flex" description="build project">

        <!-- add directory -->
        <delete dir="${build.classes}"/>
        <mkdir dir="${build.classes}"/>

        <!-- Quelltext kompilieren 
            classpath="${build.lib}/rsyntaxtextarea.jar"-->
        <!-- build CMM -->
        <javac srcdir="${java.dir}"
            destdir="${build.classes}"
            debug="true"
            deprecation="true"
            optimize="true" 
            includeantruntime="false">
            <classpath refid="classpath.base" />
        </javac>
        
        <!-- build tests -->
        <mkdir dir="${build.classes}/${jtests.dir}"/>
        <javac srcdir="${jtests.dir}"
            destdir="${build.classes}/${jtests.dir}"
            debug="true"
            includeantruntime="true">
            <classpath refid="classpath.test" />
        </javac>

        <!-- copy required files -->
        <copy todir="${build.classes}">
            <fileset dir="${java.dir}"/>
            <fileset dir="./">  
                <include name="${error.dir}/**"/>
                <!--<include name="${jtests.dir}/*.java"/>-->
                <include name="${clib.dir}/*.h"/>
                <include name="${translation.dir}/**"/>
            </fileset>
        </copy>

        <!-- build jar file -->
        <jar jarfile="${name}.jar" manifest="${manifest}" includes="clib/*.h" >
            <fileset dir="${build.classes}"/>
            <zipgroupfileset dir="${build.lib}" includes="*.jar"/>
        </jar>

        <jar update="yes" jarfile="${name}.jar">
           <zipfileset src="${name}.jar" includes="../clib/error.h"/>
        </jar>
    </target>

    <!-- cleanup  -->
    <target name="clean" description="clear build-files">
        <!-- delete generated files -->
        <delete dir="${build.classes}"/>
        <delete file="${name}.jar"/>
        <delete file="xgettext.files"/>
        <delete file="${java.dir}/at/jku/ssw/cmm/gui/init/CCompactTokenMaker.java"/>
        <delete file="${java.dir}/at/jku/ssw/cmm/compiler/Scanner.java"/>
        <delete file="${java.dir}/at/jku/ssw/cmm/compiler/Parser.java"/>
    </target>
    
    <!-- translations  -->
    <target name="translations" description="update translation-files">
    
        <!-- find java-files -->
        <exec executable="find" outputproperty="found">
            <arg value="src"/>
            <arg line="-name '*.java'"/>
        </exec>
        
        <!-- safe found java-files into xgettext.files -->
        <echo file="xgettext.files" message="${found}" />
        
        <!-- run xgettext-->
        <exec executable="xgettext" failonerror="true">
            <arg value="-k_"/>
            <arg value="-o" />
            <arg value="po/keys.pot"/>
            <arg value="--files-from=xgettext.files"/>
        </exec>
       
        <!-- merge changes into german translation -->
        <exec executable="msgmerge" failonerror="true">
            <arg value="-U"/>
            <arg value="po/de.po" />
            <arg value="po/keys.pot"/>
        </exec>
    </target>

    <!-- test project -->
    <target name="test" depends="build, test-compiler, test-interpreter, test-gui" description="test project"/>

    <!-- test compiler part -->
    <target name="test-compiler" depends="build" description="test compiler part">
        <!-- test compiling of a few files -->
        <exec executable="./tests/compiler/test.sh" failonerror="true" />
        <!-- start bruteforce test -->
        <exec executable="./tests/compiler/bruteforcetest.sh" failonerror="true"/>
    </target>

<!--<property name="default.target.dir" value="${basedir}/target" />
    <property name="test.report.dir" value="${default.target.dir}/test-reports" />

    <target name="basic">
        <mkdir dir="${test.report.dir}" />
        <junit fork="true" printSummary="true" showOutput="true">
            <formatter type="plain" />
            <classpath>
                <pathelement path="${basedir}/bin "/>
            </classpath>
            <batchtest fork="true" todir="${test.report.dir}" >
                <fileset dir="${basedir}/bin">
                    <include name="**/*Test.*" />
                </fileset>
            </batchtest>
        </junit>
    </target>-->



    <!-- test interpreter part -->
    <target name="test-interpreter" depends="build" description="test interpreter part">
        <!-- create log-directory -->
        <delete dir="${jtests.dir}/log"/>
        <mkdir dir="${jtests.dir}/log"/>
        
        <!-- run jtest -->
        <junit printSummary="true" showOutput="false" haltonfailure="no" failureproperty="test.failed">
            <classpath>
                <pathelement location="${build.classes}/${jtests.dir}"/>
                <pathelement location="${build.classes}"/>
                <pathelement path="${build.classes}/${jtests.dir}"/>
                <pathelement path="${build.classes}"/>
                <pathelement location="${build.lib}/junit-4.12.jar"/>
                <pathelement location="${build.lib}/hamcrest-core-1.3.jar"/>
            </classpath>
            <formatter type="plain" />
            <!--<classpath refid="classpath.test" />-->
            <batchtest fork="true" todir="${jtests.dir}/log" >
                <fileset dir="${build.classes}/${jtests.dir}">
                    <include name="**/*.class"/>
                </fileset>
            </batchtest>
        </junit>
        
        <!-- check if junit-test was failing -->
        <fail message="Test failure detected, check test results." if="test.failed" />
    </target>

    <!-- test gui part -->
    <target name="test-gui" depends="build" description="test gui part">
        <!-- check if gui start without exception -->
        <exec executable="timeout" failonerror="true">
            <arg value="60"/>
            <arg value="java"/>
            <arg value="-jar"/>
            <arg value="${name}.jar"/>
            <arg value="-t"/>
        </exec>
    </target>
</project>
