/* The following code was generated by JFlex 1.4.3 on 15.12.14 14:36 */

package at.jku.ssw.cmm.gui.init;

import java.io.*;   
import javax.swing.text.Segment;   

import org.fife.ui.rsyntaxtextarea.*;   


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15.12.14 14:36 from the specification file
 * <tt>src/at/jku/ssw/cmm/gui/init/CCompactTokenMaker.flex</tt>
 */
public class CCompactTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\41\1\0\1\46\1\54\22\0\1\46\1\34\1\42"+
    "\1\55\1\56\1\63\1\102\1\31\1\27\1\27\1\47\1\7\1\62"+
    "\1\35\1\52\1\30\1\45\1\76\1\74\1\37\4\5\2\3\1\65"+
    "\1\61\1\32\1\26\1\33\1\25\1\57\4\4\1\6\1\53\5\1"+
    "\1\51\10\1\1\50\2\1\1\40\2\1\1\60\1\36\1\60\1\101"+
    "\1\2\1\0\1\22\1\44\1\20\1\10\1\11\1\12\1\72\1\64"+
    "\1\13\1\1\1\67\1\16\1\73\1\14\1\70\1\21\1\77\1\66"+
    "\1\17\1\24\1\15\1\43\1\23\1\75\1\71\1\1\1\100\1\103"+
    "\1\100\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\13\2\1\1\1\4"+
    "\1\5\1\4\1\6\4\4\1\2\1\7\1\10\2\2"+
    "\1\3\1\11\1\4\2\1\3\2\2\4\3\12\1\13"+
    "\5\12\1\14\1\12\2\15\2\3\1\16\1\2\1\17"+
    "\37\2\1\0\1\20\1\21\2\22\1\23\1\6\2\10"+
    "\1\24\3\2\1\15\6\1\1\0\3\2\3\0\1\25"+
    "\5\0\1\3\1\0\1\3\1\15\1\16\2\2\1\26"+
    "\6\2\1\27\2\2\2\26\20\2\1\6\1\30\1\6"+
    "\3\22\1\6\2\10\1\31\3\2\1\32\10\1\6\0"+
    "\2\2\10\0\1\16\1\0\13\2\1\26\1\6\1\10"+
    "\1\2\2\32\6\1\10\0\1\2\1\0\1\33\2\0"+
    "\1\34\1\0\6\2\1\26\1\32\2\1\1\35\1\1"+
    "\6\0\1\2\4\0\2\2\1\1\2\0\1\35\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u0550\0\u06a4\0\314\0\u0550\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0550\0\u0880\0\u0550\0\u08c4\0\u0908"+
    "\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0550\0\u0aa0\0\u0ae4"+
    "\0\u0b28\0\u0b6c\0\u0bb0\0\u0550\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0d04\0\u0d48\0\u0d8c\0\u0110\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u0550\0\u0550\0\u1650\0\u1694"+
    "\0\u0550\0\u16d8\0\u171c\0\u1760\0\u0550\0\u17a4\0\u17e8\0\u182c"+
    "\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c"+
    "\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u0550\0\u1c28"+
    "\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u0c38\0\u1e04"+
    "\0\u0c38\0\u1e48\0\u1e8c\0\u0110\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u0110\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8"+
    "\0\u0550\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\u0550\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970"+
    "\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90"+
    "\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0"+
    "\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0"+
    "\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0"+
    "\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410"+
    "\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630"+
    "\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850"+
    "\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u2134\0\u3a2c"+
    "\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u0c38\0\u3b80\0\u3bc4\0\314"+
    "\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4"+
    "\0\u3e28\0\u3894\0\u3e6c\0\u3960\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c"+
    "\0\u3fc0\0\u0550\0\u4004\0\u4048";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\2\5\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\6\1\5\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\24\2\5\1\43"+
    "\1\5\1\44\1\45\2\4\1\25\1\46\1\32\1\24"+
    "\1\5\1\44\1\47\4\5\1\50\1\6\1\5\1\6"+
    "\1\5\1\25\1\32\1\51\1\52\12\53\1\54\10\53"+
    "\1\55\15\53\1\56\5\53\1\57\14\53\1\60\17\53"+
    "\12\61\1\62\10\61\1\63\15\61\1\64\22\61\1\65"+
    "\17\61\7\4\1\0\15\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\1\4"+
    "\1\0\12\4\4\0\1\4\6\5\1\0\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\3\66\1\6\1\66\1\6\1\67\1\0\1\66"+
    "\1\67\3\66\1\70\1\71\6\66\11\0\1\66\1\6"+
    "\1\66\2\0\2\66\1\6\2\0\1\70\1\71\1\72"+
    "\1\66\1\0\3\66\4\0\1\66\1\0\6\66\1\6"+
    "\1\66\1\6\1\66\13\0\1\32\16\0\1\32\55\0"+
    "\1\4\6\5\1\0\1\5\1\73\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\2\5\1\74"+
    "\7\5\4\0\1\4\6\5\1\0\6\5\1\75\6\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\7\5\1\76\2\5\4\0\1\4\6\5\1\0\6\5"+
    "\1\77\3\5\1\100\1\5\1\101\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\1\102\1\5\1\103"+
    "\2\5\1\104\4\5\4\0\1\4\6\5\1\0\2\5"+
    "\1\74\1\5\1\105\7\5\1\101\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\12\5\4\0\1\4"+
    "\6\5\1\0\1\102\1\106\1\5\1\107\11\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\2\5"+
    "\1\110\7\5\4\0\1\4\6\5\1\0\3\5\1\111"+
    "\4\5\1\112\2\5\1\113\1\114\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\1\115\10\5\1\116"+
    "\4\0\1\4\6\5\1\0\1\5\1\117\10\5\1\75"+
    "\2\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\120"+
    "\1\0\2\5\1\121\7\5\4\0\1\4\6\5\1\0"+
    "\5\5\1\122\7\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\1\123\1\5\1\124\7\5\4\0"+
    "\1\4\6\5\1\0\7\5\1\125\1\126\3\5\1\127"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\12\5\4\0\1\4\6\5\1\0\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\130\1\0\1\131\11\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\132\6\5\1\111"+
    "\2\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\1\133\11\5\31\0\1\134\104\0\1\32\207\0"+
    "\1\32\1\0\1\135\16\0\1\136\34\0\25\137\1\140"+
    "\3\137\1\141\4\137\1\142\2\137\1\0\42\137\32\0"+
    "\1\24\104\0\1\24\76\0\1\32\6\0\1\32\46\0"+
    "\36\36\1\143\2\36\1\144\1\145\41\36\1\4\6\5"+
    "\1\0\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\2\5\1\146\7\5\4\0\1\4\6\5"+
    "\1\0\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\1\147\1\5\1\150\7\5\4\0\3\66"+
    "\1\6\1\66\1\6\1\67\1\0\1\66\1\67\3\66"+
    "\1\70\1\71\6\66\11\0\1\66\1\6\1\151\2\0"+
    "\2\66\1\6\2\0\1\70\1\71\1\72\1\66\1\0"+
    "\3\66\4\0\1\66\1\0\6\66\1\6\1\151\1\6"+
    "\1\66\52\0\1\42\40\0\1\72\1\0\1\72\31\0"+
    "\1\72\5\0\1\72\26\0\1\72\1\0\1\72\5\0"+
    "\7\4\1\0\1\152\1\153\1\4\1\154\1\4\1\155"+
    "\3\4\1\156\1\4\1\157\1\4\11\0\3\4\2\0"+
    "\3\4\1\160\1\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\1\4\1\0\12\4\4\0\1\4\6\5\1\0"+
    "\1\5\1\161\10\5\1\162\2\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\12\5\4\0\1\4"+
    "\6\5\1\0\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\2\5\1\163\7\5\106\0\1\32"+
    "\104\0\1\32\12\53\1\0\10\53\1\0\15\53\1\0"+
    "\5\53\1\0\14\53\1\0\17\53\13\0\1\164\10\0"+
    "\1\165\102\0\1\166\110\0\1\167\77\0\1\170\57\0"+
    "\12\61\1\0\10\61\1\0\15\61\1\0\22\61\1\0"+
    "\17\61\13\0\1\171\10\0\1\172\102\0\1\173\104\0"+
    "\1\174\57\0\7\66\1\0\15\66\11\0\3\66\2\0"+
    "\3\66\2\0\2\66\1\0\1\66\1\0\3\66\4\0"+
    "\1\66\1\0\12\66\4\0\3\66\1\175\1\66\1\175"+
    "\1\66\1\176\15\66\10\0\1\176\1\66\1\175\1\66"+
    "\2\0\2\66\1\175\2\0\2\66\1\0\1\66\1\0"+
    "\3\66\4\0\1\66\1\0\6\66\1\175\1\66\1\175"+
    "\1\66\4\0\7\66\1\0\6\66\1\177\6\66\11\0"+
    "\3\66\2\0\3\66\2\0\1\66\1\177\1\0\1\66"+
    "\1\0\3\66\4\0\1\66\1\0\12\66\4\0\7\66"+
    "\1\0\5\66\1\177\7\66\11\0\3\66\2\0\3\66"+
    "\2\0\1\177\1\66\1\0\1\66\1\0\3\66\4\0"+
    "\1\66\1\0\12\66\4\0\3\66\1\72\1\66\1\72"+
    "\1\200\1\0\1\66\1\200\1\201\3\66\1\201\6\66"+
    "\11\0\1\66\1\72\1\66\2\0\2\66\1\72\2\0"+
    "\1\66\1\201\1\0\1\201\1\0\3\66\4\0\1\66"+
    "\1\0\6\66\1\72\1\66\1\72\1\66\4\0\1\4"+
    "\6\5\1\0\2\5\1\202\12\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\12\5\4\0\1\4"+
    "\6\5\1\0\7\5\1\203\5\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\12\5\4\0\1\4"+
    "\6\5\1\0\11\5\1\204\3\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\12\5\4\0\1\4"+
    "\6\5\1\0\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\2\5\1\205\7\5\4\0\1\4"+
    "\6\5\1\0\6\5\1\206\6\5\11\0\1\4\2\5"+
    "\2\0\1\5\1\207\1\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\1\5"+
    "\1\204\10\5\4\0\1\4\6\5\1\0\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\2\5"+
    "\1\210\7\5\4\0\1\4\6\5\1\0\1\5\1\211"+
    "\13\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\12\5\4\0\1\4\6\5\1\0\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\1\74"+
    "\11\5\4\0\1\4\6\5\1\0\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\2\5\1\212"+
    "\7\5\4\0\1\4\6\5\1\0\14\5\1\213\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\4\5\1\214\10\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\15\5\11\0\1\4\2\5"+
    "\2\0\1\5\1\215\1\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\4\5\1\216\5\5"+
    "\4\0\1\4\6\5\1\0\4\5\1\217\10\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\12\5\1\220\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\221\11\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\1\222\11\5\4\0"+
    "\1\4\6\5\1\0\12\5\1\162\2\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\12\5\4\0"+
    "\1\4\6\5\1\0\15\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\1\223\11\5\4\0\1\4"+
    "\6\5\1\0\3\5\1\224\11\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\12\5\4\0\1\4"+
    "\6\5\1\0\12\5\1\225\2\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\12\5\4\0\1\4"+
    "\6\5\1\0\4\5\1\226\2\5\1\217\5\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\227\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\12\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\230\11\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\12\5\4\0"+
    "\1\4\6\5\1\0\13\5\1\204\1\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\12\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\231\11\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\12\5\4\0"+
    "\1\4\6\5\1\0\15\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\2\5\1\207\7\5\4\0"+
    "\1\4\6\5\1\0\12\5\1\232\2\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\2\5\1\233"+
    "\7\5\4\0\1\4\6\5\1\0\3\5\1\234\11\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\12\5\4\0\1\4\6\5\1\0\3\5\1\235\11\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\12\5\4\0\1\4\6\5\1\0\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\5\5\1\236"+
    "\4\5\4\0\1\4\6\5\1\0\5\5\1\237\7\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\12\5\32\0\10\32\46\0\31\240\1\241\7\240\1\0"+
    "\67\240\1\242\3\240\1\241\7\240\1\0\47\240\1\243"+
    "\4\240\1\137\1\240\1\137\5\240\1\137\1\240\2\137"+
    "\3\240\1\244\4\240\1\137\1\245\1\246\1\0\3\137"+
    "\1\245\20\240\1\137\5\240\1\245\1\246\1\245\5\240"+
    "\5\144\1\36\4\144\1\36\1\144\1\36\5\144\1\36"+
    "\1\144\2\36\3\144\1\36\4\144\2\36\1\247\1\0"+
    "\4\36\20\144\1\36\5\144\1\36\1\247\1\36\43\144"+
    "\1\250\3\144\1\251\41\144\1\4\6\5\1\0\3\5"+
    "\1\252\11\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\4\0\1\4\6\5\1\0\1\5"+
    "\1\253\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\4\0\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\2\5\1\254\7\5\4\0\3\66\4\255\1\0\3\255"+
    "\5\66\1\255\1\66\1\255\2\66\11\0\1\66\1\255"+
    "\1\66\2\0\1\66\2\255\2\0\2\66\1\0\1\255"+
    "\1\0\3\66\4\0\1\66\1\0\6\66\1\255\1\66"+
    "\1\255\1\66\4\0\7\4\1\0\1\4\1\256\13\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\1\4\1\0\12\4\4\0\7\4"+
    "\1\0\4\4\1\257\1\4\1\260\6\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\1\4\1\0\12\4\4\0\7\4\1\0\2\4"+
    "\1\261\1\4\1\262\10\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\1\4"+
    "\1\0\12\4\4\0\7\4\1\0\4\4\1\263\10\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\1\4\1\0\12\4\4\0\7\4"+
    "\1\0\12\4\1\264\2\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\1\4"+
    "\1\0\12\4\4\0\7\4\1\0\12\4\1\265\2\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\1\4\1\0\12\4\14\0\1\266"+
    "\1\267\1\0\1\270\1\0\1\271\3\0\1\272\1\0"+
    "\1\273\22\0\1\160\35\0\1\4\6\5\1\0\12\5"+
    "\1\212\1\5\1\274\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\212\10\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\1\275\14\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\22\0\1\276\106\0\1\277\105\0"+
    "\1\300\104\0\1\301\75\0\1\302\106\0\1\303\105\0"+
    "\1\304\104\0\1\305\57\0\3\66\1\175\1\66\1\175"+
    "\1\66\1\0\5\66\1\70\1\71\6\66\11\0\1\66"+
    "\1\175\1\66\2\0\2\66\1\175\2\0\1\70\1\71"+
    "\1\0\1\66\1\0\3\66\4\0\1\66\1\0\6\66"+
    "\1\175\1\66\1\175\1\66\7\0\1\175\1\0\1\175"+
    "\31\0\1\175\5\0\1\175\26\0\1\175\1\0\1\175"+
    "\5\0\3\66\1\306\1\66\1\306\1\66\1\307\15\66"+
    "\10\0\1\307\1\66\1\306\1\66\2\0\2\66\1\306"+
    "\2\0\2\66\1\0\1\66\1\0\3\66\4\0\1\66"+
    "\1\0\6\66\1\306\1\66\1\306\1\66\4\0\1\4"+
    "\6\5\1\0\12\5\1\310\2\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\12\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\74\13\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\12\5\4\0\1\4"+
    "\6\5\1\0\12\5\1\105\2\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\2\5\1\311\7\5"+
    "\4\0\1\4\6\5\1\0\7\5\1\237\5\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\7\5\1\204\5\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\12\5\1\204\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\7\5\1\76\2\5"+
    "\4\0\1\4\6\5\1\0\1\204\14\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\12\5\4\0"+
    "\1\4\6\5\1\0\15\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\4\5\1\312\5\5\4\0"+
    "\1\4\6\5\1\0\15\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\1\313\11\5\4\0\1\4"+
    "\6\5\1\0\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\10\5\1\314\1\5\4\0\1\4"+
    "\6\5\1\0\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\204\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\275\10\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\315\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\4\0\1\4\6\5\1\0\3\5"+
    "\1\316\1\5\1\317\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\12\5\4\0\1\4\6\5"+
    "\1\0\14\5\1\204\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\6\5\1\204\6\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\1\213\11\5\4\0\1\4\6\5\1\0\7\5"+
    "\1\320\4\5\1\321\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\10\5\1\204\4\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\322\10\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\204\10\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\323\10\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\3\5\1\204\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\6\5\1\203\6\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\12\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\236\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\4\0\1\4\6\5\1\0\1\5"+
    "\1\204\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\4\0\1\4\6\5\1\0\1\5"+
    "\1\213\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\4\0\31\240\1\141\7\240\1\0"+
    "\70\240\3\137\1\244\4\137\3\240\1\0\47\240\1\137"+
    "\23\240\1\241\5\240\1\137\1\240\1\0\3\240\1\137"+
    "\26\240\1\137\1\240\1\137\5\240\31\0\1\241\52\0"+
    "\5\240\1\243\23\240\1\241\5\240\1\243\1\240\1\0"+
    "\3\240\1\243\26\240\1\243\1\240\1\243\10\240\4\324"+
    "\1\240\3\324\5\240\1\324\1\240\1\324\6\240\1\141"+
    "\5\240\1\324\1\240\1\0\2\240\2\324\5\240\1\324"+
    "\20\240\1\324\1\240\1\324\5\240\3\144\4\325\1\144"+
    "\3\325\5\144\1\325\1\144\1\325\13\144\1\250\1\325"+
    "\2\144\1\251\1\144\2\325\5\144\1\325\20\144\1\325"+
    "\1\144\1\325\46\144\1\0\42\144\1\4\6\5\1\0"+
    "\1\213\14\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\4\0\1\4\6\5\1\0\12\5"+
    "\1\326\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\4\0\1\4\6\5\1\0\6\5"+
    "\1\213\6\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\4\0\3\66\4\255\1\0\3\255"+
    "\2\66\1\327\1\330\1\66\1\255\1\66\1\255\2\66"+
    "\11\0\1\66\1\255\1\66\2\0\1\66\2\255\2\0"+
    "\1\327\1\330\1\0\1\255\1\0\3\66\4\0\1\66"+
    "\1\0\6\66\1\255\1\66\1\255\1\66\4\0\7\4"+
    "\1\0\2\4\1\331\12\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\1\4"+
    "\1\0\12\4\4\0\7\4\1\0\1\332\14\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\12\4\4\0\7\4\1\0"+
    "\7\4\1\333\5\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\12\4\4\0\7\4\1\0\1\334\3\4\1\263\10\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\1\4\1\0\12\4\4\0\7\4"+
    "\1\0\10\4\1\335\4\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\1\4"+
    "\1\0\12\4\4\0\7\4\1\0\1\334\14\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\12\4\4\0\7\4\1\0"+
    "\5\4\1\260\7\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\12\4\4\0\7\4\1\0\3\4\1\336\11\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\12\4\15\0\1\337\106\0"+
    "\1\340\1\0\1\341\77\0\1\342\1\0\1\343\103\0"+
    "\1\344\111\0\1\345\103\0\1\346\61\0\1\4\6\5"+
    "\1\0\5\5\1\347\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\12\5\4\0\1\4\6\5"+
    "\1\0\2\5\1\204\12\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\12\5\15\0\1\277\157\0"+
    "\1\350\70\0\1\351\52\0\1\352\73\0\1\303\157\0"+
    "\1\353\70\0\1\354\52\0\1\355\62\0\3\66\1\306"+
    "\1\66\1\306\1\66\1\0\2\66\1\201\3\66\1\201"+
    "\6\66\11\0\1\66\1\306\1\66\2\0\2\66\1\306"+
    "\2\0\1\66\1\201\1\0\1\201\1\0\3\66\4\0"+
    "\1\66\1\0\6\66\1\306\1\66\1\306\1\66\7\0"+
    "\1\306\1\0\1\306\31\0\1\306\5\0\1\306\26\0"+
    "\1\306\1\0\1\306\5\0\1\4\6\5\1\0\5\5"+
    "\1\356\7\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\4\0\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\1\204\11\5\4\0\1\4\6\5\1\0\14\5\1\357"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\12\5\4\0\1\4\6\5\1\0\12\5\1\360\2\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\12\5\4\0\1\4\6\5\1\0\15\5\11\0\1\4"+
    "\2\5\2\0\2\5\1\204\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\10\5\1\361\4\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\4\5\1\362\10\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\10\5\1\320\4\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\74\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\12\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\363\11\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\12\5\4\0"+
    "\1\4\6\5\1\0\14\5\1\364\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\12\5\4\0\1\4"+
    "\6\5\1\0\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\6\5\1\204\3\5\4\0\3\240"+
    "\4\137\1\240\3\137\5\240\1\137\1\240\1\137\6\240"+
    "\1\141\5\240\1\137\1\240\1\0\2\240\2\137\5\240"+
    "\1\137\20\240\1\137\1\240\1\137\5\240\3\144\4\36"+
    "\1\144\3\36\5\144\1\36\1\144\1\36\13\144\1\250"+
    "\1\36\2\144\1\251\1\144\2\36\5\144\1\36\20\144"+
    "\1\36\1\144\1\36\5\144\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\1\5\1\74\10\5\4\0\7\66\1\0\6\66\1\365"+
    "\6\66\11\0\3\66\2\0\3\66\2\0\1\66\1\365"+
    "\1\0\1\66\1\0\3\66\4\0\1\66\1\0\12\66"+
    "\4\0\7\66\1\0\5\66\1\365\7\66\11\0\3\66"+
    "\2\0\3\66\2\0\1\365\1\66\1\0\1\66\1\0"+
    "\3\66\4\0\1\66\1\0\12\66\4\0\7\4\1\0"+
    "\3\4\1\366\11\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\12\4\4\0\7\4\1\0\3\4\1\367\11\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\12\4\4\0\7\4\1\0"+
    "\1\4\1\370\13\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\12\4\4\0\7\4\1\0\1\4\1\367\13\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\12\4\4\0\7\4\1\0"+
    "\6\4\1\371\6\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\12\4\4\0\7\4\1\0\14\4\1\370\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\1\4\1\0\12\4\16\0\1\372\101\0\1\373"+
    "\112\0\1\374\74\0\1\375\3\0\1\344\107\0\1\376"+
    "\73\0\1\375\110\0\1\341\101\0\1\377\70\0\1\4"+
    "\6\5\1\0\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\1\u0100\11\5\34\0\1\u0101\54\0"+
    "\1\351\1\u0102\4\351\1\u0102\15\351\3\u0102\1\351\1\u0102"+
    "\2\0\2\u0102\1\0\2\351\2\0\3\351\1\0\1\u0102"+
    "\2\351\1\u0102\1\351\1\0\1\u0102\1\351\5\u0102\1\351"+
    "\1\u0102\12\351\2\0\1\u0102\20\0\1\277\45\0\1\350"+
    "\46\0\1\u0103\54\0\1\354\1\u0104\4\354\1\u0104\15\354"+
    "\3\u0104\1\354\1\u0104\2\0\2\u0104\1\0\2\354\2\0"+
    "\3\354\1\0\1\u0104\2\354\1\u0104\1\354\1\0\1\u0104"+
    "\1\354\5\u0104\1\354\1\u0104\12\354\2\0\1\u0104\20\0"+
    "\1\303\45\0\1\353\16\0\1\4\6\5\1\0\6\5"+
    "\1\320\6\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\12\5\4\0\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\1\u0105\11\5\4\0\1\4\6\5\1\0\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\74\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\4\5\1\213\5\5"+
    "\4\0\1\4\6\5\1\0\4\5\1\u0106\10\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\12\5"+
    "\4\0\1\4\6\5\1\0\2\5\1\204\4\5\1\204"+
    "\5\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\12\5\4\0\7\4\1\0\4\4\1\333\10\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\1\4\1\0\12\4\4\0\7\4"+
    "\1\0\2\4\1\370\12\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\1\4"+
    "\1\0\12\4\4\0\7\4\1\0\5\4\1\u0107\7\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\1\4\1\0\12\4\17\0\1\u0108"+
    "\103\0\1\u0109\101\0\1\u010a\103\0\1\u0109\110\0\1\u010b"+
    "\111\0\1\u010a\57\0\1\4\6\5\1\0\4\5\1\74"+
    "\10\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\12\5\34\0\1\351\103\0\1\354\53\0\1\4"+
    "\6\5\1\0\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\3\5\1\74\6\5\4\0\1\4"+
    "\6\5\1\0\5\5\1\203\7\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\12\5\4\0\7\4"+
    "\1\0\1\333\14\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\12\4\20\0\1\374\101\0\1\u010a\106\0\1\u010c\76\0"+
    "\1\374\73\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16524];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\21\1\1\11\4\1\1\11\2\1\1\11\6\1"+
    "\1\11\1\1\1\11\7\1\1\11\5\1\1\11\47\1"+
    "\1\0\2\11\2\1\1\11\3\1\1\11\12\1\1\0"+
    "\3\1\3\0\1\11\5\0\1\1\1\0\42\1\1\11"+
    "\7\1\1\11\14\1\6\0\2\1\10\0\1\1\1\0"+
    "\27\1\10\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\14\1\6\0\1\1\4\0\3\1\2\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public CCompactTokenMaker() {   
   }

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   

   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   

   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   

      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   

      // Start off in the proper state.   
      int state = Token.NULL;   
      switch (initialTokenType) {   
                  case Token.COMMENT_MULTILINE:   
            state = MLC;   
            start = text.offset;   
            break;   

         /* No documentation comments */   
         default:   
            state = Token.NULL;   
      }   

      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   

   }   

   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   

   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */   
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos /*= zzPushbackPos*/ = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CCompactTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CCompactTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill_old() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset_old(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { addToken(Token.PREPROCESSOR);
          }
        case 30: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 31: break;
        case 24: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 32: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 33: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 34: break;
        case 9: 
          { addToken(Token.WHITESPACE);
          }
        case 35: break;
        case 26: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 36: break;
        case 18: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 37: break;
        case 25: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 38: break;
        case 14: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 39: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 40: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 41: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 42: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 43: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 44: break;
        case 22: 
          { addToken(Token.FUNCTION);
          }
        case 45: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 46: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 47: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 48: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 49: break;
        case 19: 
          { addToken(Token.ERROR_CHAR);
          }
        case 50: break;
        case 20: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 51: break;
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 52: break;
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 54: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 56: break;
        case 10: 
          { 
          }
        case 57: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 269: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 270: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 271: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
