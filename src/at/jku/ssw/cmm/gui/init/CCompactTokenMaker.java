/* The following code was generated by JFlex 1.4.3 on 13.02.15 13:23 */

package at.jku.ssw.cmm.gui.init;

import java.io.*;   
import javax.swing.text.Segment;   

import org.fife.ui.rsyntaxtextarea.*;   


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13.02.15 13:23 from the specification file
 * <tt>src/at/jku/ssw/cmm/gui/init/CCompactTokenMaker.flex</tt>
 */
public class CCompactTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\41\1\0\1\46\1\54\22\0\1\46\1\34\1\42"+
    "\1\55\1\56\1\63\1\111\1\31\1\27\1\27\1\47\1\7\1\62"+
    "\1\35\1\52\1\30\1\45\1\106\1\104\1\37\4\5\2\3\1\65"+
    "\1\61\1\32\1\26\1\33\1\25\1\57\1\4\1\76\1\100\1\4"+
    "\1\6\1\53\2\1\1\101\2\1\1\51\1\103\1\77\4\1\1\102"+
    "\1\74\1\50\2\1\1\40\2\1\1\60\1\36\1\60\1\110\1\2"+
    "\1\0\1\22\1\44\1\20\1\10\1\11\1\12\1\72\1\64\1\13"+
    "\1\1\1\67\1\16\1\73\1\14\1\70\1\21\1\75\1\66\1\17"+
    "\1\24\1\15\1\43\1\23\1\105\1\71\1\1\1\107\1\112\1\107"+
    "\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\13\2\1\1\1\4"+
    "\1\5\1\4\1\6\4\4\1\2\1\7\1\10\2\2"+
    "\1\3\1\11\1\4\2\1\3\2\2\4\3\12\1\13"+
    "\5\12\1\14\1\12\2\15\2\3\1\16\1\2\1\17"+
    "\41\2\1\0\1\20\1\21\2\22\1\23\1\6\2\10"+
    "\1\24\3\2\1\15\6\1\1\0\4\2\3\0\1\25"+
    "\5\0\1\3\1\0\1\3\1\15\1\16\2\2\1\26"+
    "\6\2\1\27\2\2\2\26\23\2\1\6\1\30\1\6"+
    "\3\22\1\6\2\10\1\31\3\2\1\32\10\1\6\0"+
    "\3\2\10\0\1\16\1\0\15\2\1\26\1\6\1\10"+
    "\1\2\2\32\6\1\10\0\2\2\1\0\1\33\2\0"+
    "\1\34\1\0\5\2\1\26\1\2\1\32\2\1\1\35"+
    "\1\1\6\0\1\2\4\0\2\2\1\26\1\1\2\0"+
    "\1\35\1\0\5\2\1\0\23\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0465"+
    "\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd"+
    "\0\u0708\0\u05dc\0\u0753\0\341\0\u05dc\0\u079e\0\u07e9\0\u0834"+
    "\0\u087f\0\u08ca\0\u0915\0\u05dc\0\u0960\0\u05dc\0\u09ab\0\u09f6"+
    "\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d\0\u05dc\0\u0bb8\0\u0c03"+
    "\0\u0c4e\0\u0c99\0\u0ce4\0\u05dc\0\u0d2f\0\u0d7a\0\u0dc5\0\u0e10"+
    "\0\u0e5b\0\u0ea6\0\u0ef1\0\u012c\0\u0f3c\0\u0f87\0\u0fd2\0\u101d"+
    "\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275"+
    "\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482\0\u14cd"+
    "\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725"+
    "\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u05dc\0\u05dc"+
    "\0\u1932\0\u197d\0\u05dc\0\u19c8\0\u1a13\0\u1a5e\0\u05dc\0\u1aa9"+
    "\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01"+
    "\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59"+
    "\0\u1fa4\0\u05dc\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u211b\0\u2166"+
    "\0\u21b1\0\u0d7a\0\u21fc\0\u0d7a\0\u2247\0\u2292\0\u012c\0\u22dd"+
    "\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454\0\u012c\0\u249f\0\u24ea"+
    "\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u2742"+
    "\0\u278d\0\u27d8\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a"+
    "\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c\0\u05dc\0\u2ba7"+
    "\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69\0\u05dc\0\u2db4"+
    "\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76\0\u2fc1\0\u300c"+
    "\0\u3057\0\u30a2\0\u30ed\0\u3138\0\u3183\0\u31ce\0\u3219\0\u3264"+
    "\0\u32af\0\u32fa\0\u3345\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc"+
    "\0\u3507\0\u3552\0\u359d\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714"+
    "\0\u375f\0\u37aa\0\u37f5\0\u3840\0\u388b\0\u38d6\0\u3921\0\u396c"+
    "\0\u39b7\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4"+
    "\0\u3c0f\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c"+
    "\0\u3e67\0\u3eb2\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074"+
    "\0\u2580\0\u40bf\0\u410a\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u4281"+
    "\0\u42cc\0\u4317\0\u4362\0\u43ad\0\u43f8\0\u4443\0\u0d7a\0\u448e"+
    "\0\u44d9\0\341\0\u4524\0\u456f\0\u45ba\0\u4605\0\u4650\0\u469b"+
    "\0\u46e6\0\u4731\0\u477c\0\u410a\0\u47c7\0\u41eb\0\u4812\0\u485d"+
    "\0\u48a8\0\u48f3\0\u493e\0\u4989\0\u05dc\0\u49d4\0\u4a1f\0\u4a6a"+
    "\0\u4ab5\0\u4b00\0\u4b4b\0\u4b96\0\u4be1\0\u4c2c\0\u4c77\0\u4cc2"+
    "\0\u4d0d\0\u4d58\0\u4da3\0\u4dee\0\u4e39\0\u4e84\0\u4ecf\0\u4f1a"+
    "\0\u4f65\0\u4fb0\0\u4ffb\0\u5046\0\u5091\0\u50dc\0\u5127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\2\5\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\6\1\5\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\24\2\5\1\43"+
    "\1\5\1\44\1\45\2\4\1\25\1\46\1\32\1\24"+
    "\1\5\1\44\1\47\4\5\1\50\10\5\1\6\1\5"+
    "\1\6\1\25\1\32\1\51\1\52\12\53\1\54\10\53"+
    "\1\55\15\53\1\56\5\53\1\57\14\53\1\60\26\53"+
    "\12\61\1\62\10\61\1\63\15\61\1\64\22\61\1\65"+
    "\26\61\7\4\1\0\15\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\1\4"+
    "\1\0\21\4\4\0\1\4\6\5\1\0\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\3\66\1\6\1\66\1\6\1\67\1\0\1\66"+
    "\1\67\3\66\1\70\1\71\6\66\11\0\1\66\1\6"+
    "\1\66\2\0\2\66\1\6\2\0\1\70\1\71\1\72"+
    "\1\66\1\0\3\66\4\0\1\66\1\0\16\66\1\6"+
    "\1\66\1\6\13\0\1\32\16\0\1\32\64\0\1\4"+
    "\6\5\1\0\1\5\1\73\13\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\2\5\1\74\16\5"+
    "\4\0\1\4\6\5\1\0\6\5\1\75\6\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\17\5"+
    "\1\76\1\5\4\0\1\4\6\5\1\0\6\5\1\77"+
    "\3\5\1\100\1\5\1\101\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\1\102\1\5\1\103\2\5"+
    "\1\104\13\5\4\0\1\4\6\5\1\0\2\5\1\74"+
    "\1\5\1\105\7\5\1\101\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\21\5\4\0\1\4\6\5"+
    "\1\0\1\102\1\106\1\5\1\107\11\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\2\5\1\110"+
    "\16\5\4\0\1\4\6\5\1\0\3\5\1\111\1\5"+
    "\1\112\2\5\1\113\2\5\1\114\1\115\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\1\116\6\5"+
    "\1\117\11\5\4\0\1\4\6\5\1\0\1\5\1\120"+
    "\10\5\1\75\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\121\1\0\2\5\1\122\16\5\4\0\1\4"+
    "\6\5\1\0\5\5\1\123\7\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\1\124\1\5\1\125"+
    "\16\5\4\0\1\4\6\5\1\0\7\5\1\126\1\127"+
    "\3\5\1\130\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\12\5"+
    "\1\131\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\132\1\0\1\133\20\5\4\0\1\4\6\5\1\0"+
    "\3\5\1\134\6\5\1\111\2\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\1\135\20\5\31\0"+
    "\1\136\113\0\1\32\225\0\1\32\1\0\1\137\16\0"+
    "\1\140\43\0\25\141\1\142\3\141\1\143\4\141\1\144"+
    "\2\141\1\0\51\141\32\0\1\24\113\0\1\24\105\0"+
    "\1\32\6\0\1\32\55\0\36\36\1\145\2\36\1\146"+
    "\1\147\50\36\1\4\6\5\1\0\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\2\5\1\150"+
    "\16\5\4\0\1\4\6\5\1\0\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\1\151\1\5"+
    "\1\152\16\5\4\0\3\66\1\6\1\66\1\6\1\67"+
    "\1\0\1\66\1\67\3\66\1\70\1\71\6\66\11\0"+
    "\1\66\1\6\1\153\2\0\2\66\1\6\2\0\1\70"+
    "\1\71\1\72\1\66\1\0\3\66\4\0\1\66\1\0"+
    "\16\66\1\6\1\153\1\6\52\0\1\42\47\0\1\72"+
    "\1\0\1\72\31\0\1\72\5\0\1\72\36\0\1\72"+
    "\1\0\1\72\4\0\7\4\1\0\1\154\1\155\1\4"+
    "\1\156\1\4\1\157\3\4\1\160\1\4\1\161\1\4"+
    "\11\0\3\4\2\0\3\4\1\162\1\0\2\4\1\0"+
    "\1\4\1\0\3\4\4\0\1\4\1\0\21\4\4\0"+
    "\1\4\6\5\1\0\1\5\1\163\10\5\1\164\2\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\21\5\4\0\1\4\6\5\1\0\12\5\1\165\2\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\2\5\1\166\16\5\115\0\1\32\113\0\1\32\12\53"+
    "\1\0\10\53\1\0\15\53\1\0\5\53\1\0\14\53"+
    "\1\0\26\53\13\0\1\167\10\0\1\170\111\0\1\171"+
    "\117\0\1\172\106\0\1\173\66\0\12\61\1\0\10\61"+
    "\1\0\15\61\1\0\22\61\1\0\26\61\13\0\1\174"+
    "\10\0\1\175\111\0\1\176\113\0\1\177\66\0\7\66"+
    "\1\0\15\66\11\0\3\66\2\0\3\66\2\0\2\66"+
    "\1\0\1\66\1\0\3\66\4\0\1\66\1\0\21\66"+
    "\4\0\3\66\1\200\1\66\1\200\1\66\1\201\15\66"+
    "\10\0\1\201\1\66\1\200\1\66\2\0\2\66\1\200"+
    "\2\0\2\66\1\0\1\66\1\0\3\66\4\0\1\66"+
    "\1\0\16\66\1\200\1\66\1\200\4\0\7\66\1\0"+
    "\6\66\1\202\6\66\11\0\3\66\2\0\3\66\2\0"+
    "\1\66\1\202\1\0\1\66\1\0\3\66\4\0\1\66"+
    "\1\0\21\66\4\0\7\66\1\0\5\66\1\202\7\66"+
    "\11\0\3\66\2\0\3\66\2\0\1\202\1\66\1\0"+
    "\1\66\1\0\3\66\4\0\1\66\1\0\21\66\4\0"+
    "\3\66\1\72\1\66\1\72\1\203\1\0\1\66\1\203"+
    "\1\204\3\66\1\204\6\66\11\0\1\66\1\72\1\66"+
    "\2\0\2\66\1\72\2\0\1\66\1\204\1\0\1\204"+
    "\1\0\3\66\4\0\1\66\1\0\16\66\1\72\1\66"+
    "\1\72\4\0\1\4\6\5\1\0\2\5\1\205\12\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\21\5\4\0\1\4\6\5\1\0\7\5\1\206\5\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\21\5\4\0\1\4\6\5\1\0\11\5\1\207\3\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\21\5\4\0\1\4\6\5\1\0\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\2\5\1\210"+
    "\16\5\4\0\1\4\6\5\1\0\6\5\1\211\6\5"+
    "\11\0\1\4\2\5\2\0\1\5\1\212\1\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\1\5\1\207\17\5\4\0\1\4\6\5"+
    "\1\0\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\2\5\1\213\16\5\4\0\1\4\6\5"+
    "\1\0\1\5\1\214\13\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\21\5\4\0\1\4\6\5"+
    "\1\0\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\1\74\20\5\4\0\1\4\6\5\1\0"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\2\5\1\215\16\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\216\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\217\10\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\1\5\1\220\1\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\4\5\1\221\14\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\222\10\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\1\5\1\223\1\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\12\5"+
    "\1\224\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\3\5"+
    "\1\225\11\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\1\226\20\5\4\0\1\4\6\5\1\0\12\5\1\164"+
    "\2\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\1\227"+
    "\20\5\4\0\1\4\6\5\1\0\3\5\1\230\11\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\21\5\4\0\1\4\6\5\1\0\12\5\1\231\2\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\21\5\4\0\1\4\6\5\1\0\4\5\1\232\2\5"+
    "\1\222\5\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\14\5"+
    "\1\233\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\3\5\1\234"+
    "\11\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\13\5\1\207"+
    "\1\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\3\5\1\235"+
    "\3\5\1\236\5\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\21\5\4\0\1\4\6\5\1\0"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\2\5\1\212\16\5\4\0\1\4\6\5\1\0"+
    "\12\5\1\237\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\2\5\1\240\16\5\4\0\1\4"+
    "\6\5\1\0\3\5\1\241\11\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\21\5\4\0\1\4"+
    "\6\5\1\0\3\5\1\242\11\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\21\5\4\0\1\4"+
    "\6\5\1\0\3\5\1\243\11\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\21\5\4\0\1\4"+
    "\6\5\1\0\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\5\5\1\244\13\5\4\0\1\4"+
    "\6\5\1\0\5\5\1\245\7\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\21\5\32\0\10\32"+
    "\55\0\31\246\1\247\7\246\1\0\76\246\1\250\3\246"+
    "\1\247\7\246\1\0\56\246\1\251\4\246\1\141\1\246"+
    "\1\141\5\246\1\141\1\246\2\141\3\246\1\252\4\246"+
    "\1\141\1\253\1\254\1\0\3\141\1\253\20\246\1\141"+
    "\15\246\1\253\1\254\1\253\4\246\5\146\1\36\4\146"+
    "\1\36\1\146\1\36\5\146\1\36\1\146\2\36\3\146"+
    "\1\36\4\146\2\36\1\255\1\0\4\36\20\146\1\36"+
    "\15\146\1\36\1\255\1\36\42\146\1\256\3\146\1\257"+
    "\50\146\1\4\6\5\1\0\3\5\1\260\11\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\1\5\1\261\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\2\5\1\262\16\5"+
    "\4\0\3\66\4\263\1\0\3\263\5\66\1\263\1\66"+
    "\1\263\2\66\11\0\1\66\1\263\1\66\2\0\1\66"+
    "\2\263\2\0\2\66\1\0\1\263\1\0\3\66\4\0"+
    "\1\66\1\0\10\66\1\263\1\66\1\263\3\66\1\263"+
    "\1\66\1\263\4\0\7\4\1\0\1\4\1\264\13\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\1\4\1\0\21\4\4\0\7\4"+
    "\1\0\4\4\1\265\1\4\1\266\6\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\1\4\1\0\21\4\4\0\7\4\1\0\2\4"+
    "\1\267\1\4\1\270\10\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\1\4"+
    "\1\0\21\4\4\0\7\4\1\0\4\4\1\271\10\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\1\4\1\0\21\4\4\0\7\4"+
    "\1\0\12\4\1\272\2\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\1\4"+
    "\1\0\21\4\4\0\7\4\1\0\12\4\1\273\2\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\1\4\1\0\21\4\14\0\1\274"+
    "\1\275\1\0\1\276\1\0\1\277\3\0\1\300\1\0"+
    "\1\301\22\0\1\162\44\0\1\4\6\5\1\0\12\5"+
    "\1\215\1\5\1\302\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\21\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\215\10\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\21\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\303\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\1\304"+
    "\14\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\22\0\1\305\115\0\1\306\114\0\1\307"+
    "\113\0\1\310\104\0\1\311\115\0\1\312\114\0\1\313"+
    "\113\0\1\314\66\0\3\66\1\200\1\66\1\200\1\66"+
    "\1\0\5\66\1\70\1\71\6\66\11\0\1\66\1\200"+
    "\1\66\2\0\2\66\1\200\2\0\1\70\1\71\1\0"+
    "\1\66\1\0\3\66\4\0\1\66\1\0\16\66\1\200"+
    "\1\66\1\200\7\0\1\200\1\0\1\200\31\0\1\200"+
    "\5\0\1\200\36\0\1\200\1\0\1\200\4\0\3\66"+
    "\1\315\1\66\1\315\1\66\1\316\15\66\10\0\1\316"+
    "\1\66\1\315\1\66\2\0\2\66\1\315\2\0\2\66"+
    "\1\0\1\66\1\0\3\66\4\0\1\66\1\0\16\66"+
    "\1\315\1\66\1\315\4\0\1\4\6\5\1\0\12\5"+
    "\1\317\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\1\5"+
    "\1\74\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\12\5"+
    "\1\105\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\2\5\1\320\16\5\4\0\1\4\6\5"+
    "\1\0\7\5\1\245\5\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\21\5\4\0\1\4\6\5"+
    "\1\0\7\5\1\207\5\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\21\5\4\0\1\4\6\5"+
    "\1\0\12\5\1\207\2\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\21\5\4\0\1\4\6\5"+
    "\1\0\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\17\5\1\76\1\5\4\0\1\4\6\5"+
    "\1\0\1\207\14\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\21\5\4\0\1\4\6\5\1\0"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\4\5\1\321\14\5\4\0\1\4\6\5\1\0"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\1\322\20\5\4\0\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\20\5\1\323\4\0\1\4\6\5\1\0\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\207\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\7\5\1\324\5\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\4\5\1\304\10\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\325\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\21\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\326\1\5\1\327\2\5"+
    "\1\330\4\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\14\5"+
    "\1\207\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\6\5\1\207"+
    "\6\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\1\216"+
    "\20\5\4\0\1\4\6\5\1\0\7\5\1\241\4\5"+
    "\1\331\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\10\5\1\207"+
    "\4\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\4\5\1\332"+
    "\10\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\4\5\1\207"+
    "\10\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\1\5\1\333"+
    "\13\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\4\5\1\334"+
    "\10\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\3\5\1\207"+
    "\11\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\14\5\1\74"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\21\5\4\0\1\4\6\5\1\0\6\5\1\206\6\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\21\5\4\0\1\4\6\5\1\0\14\5\1\244\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\1\5\1\207\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\1\5\1\216\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\31\246\1\143\7\246\1\0\77\246\3\141\1\252"+
    "\4\141\3\246\1\0\56\246\1\141\23\246\1\247\5\246"+
    "\1\141\1\246\1\0\3\246\1\141\36\246\1\141\1\246"+
    "\1\141\4\246\31\0\1\247\61\0\5\246\1\251\23\246"+
    "\1\247\5\246\1\251\1\246\1\0\3\246\1\251\36\246"+
    "\1\251\1\246\1\251\7\246\4\335\1\246\3\335\5\246"+
    "\1\335\1\246\1\335\6\246\1\143\5\246\1\335\1\246"+
    "\1\0\2\246\2\335\5\246\1\335\22\246\1\335\1\246"+
    "\1\335\3\246\1\335\1\246\1\335\4\246\3\146\4\336"+
    "\1\146\3\336\5\146\1\336\1\146\1\336\13\146\1\256"+
    "\1\336\2\146\1\257\1\146\2\336\5\146\1\336\22\146"+
    "\1\336\1\146\1\336\3\146\1\336\1\146\1\336\45\146"+
    "\1\0\51\146\1\4\6\5\1\0\1\216\14\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\12\5\1\337\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\6\5\1\216\6\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\3\66\4\263\1\0\3\263\2\66\1\340\1\341"+
    "\1\66\1\263\1\66\1\263\2\66\11\0\1\66\1\263"+
    "\1\66\2\0\1\66\2\263\2\0\1\340\1\341\1\0"+
    "\1\263\1\0\3\66\4\0\1\66\1\0\10\66\1\263"+
    "\1\66\1\263\3\66\1\263\1\66\1\263\4\0\7\4"+
    "\1\0\2\4\1\342\12\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\1\4"+
    "\1\0\21\4\4\0\7\4\1\0\1\343\14\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\21\4\4\0\7\4\1\0"+
    "\7\4\1\344\5\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\21\4\4\0\7\4\1\0\1\345\3\4\1\271\10\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\1\4\1\0\21\4\4\0\7\4"+
    "\1\0\10\4\1\346\4\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\1\4"+
    "\1\0\21\4\4\0\7\4\1\0\1\345\14\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\21\4\4\0\7\4\1\0"+
    "\5\4\1\266\7\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\21\4\4\0\7\4\1\0\3\4\1\347\11\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\21\4\15\0\1\350\115\0"+
    "\1\351\1\0\1\352\106\0\1\353\1\0\1\354\112\0"+
    "\1\355\120\0\1\356\112\0\1\357\70\0\1\4\6\5"+
    "\1\0\5\5\1\360\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\21\5\4\0\1\4\6\5"+
    "\1\0\10\5\1\361\4\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\21\5\4\0\1\4\6\5"+
    "\1\0\2\5\1\207\12\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\21\5\15\0\1\306\166\0"+
    "\1\362\77\0\1\363\61\0\1\364\102\0\1\312\166\0"+
    "\1\365\77\0\1\366\61\0\1\367\71\0\3\66\1\315"+
    "\1\66\1\315\1\66\1\0\2\66\1\204\3\66\1\204"+
    "\6\66\11\0\1\66\1\315\1\66\2\0\2\66\1\315"+
    "\2\0\1\66\1\204\1\0\1\204\1\0\3\66\4\0"+
    "\1\66\1\0\16\66\1\315\1\66\1\315\7\0\1\315"+
    "\1\0\1\315\31\0\1\315\5\0\1\315\36\0\1\315"+
    "\1\0\1\315\4\0\1\4\6\5\1\0\5\5\1\370"+
    "\7\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\1\207"+
    "\20\5\4\0\1\4\6\5\1\0\14\5\1\361\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\12\5\1\371\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\15\5\11\0\1\4\2\5"+
    "\2\0\2\5\1\207\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\21\5\4\0"+
    "\1\4\6\5\1\0\14\5\1\320\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\21\5\4\0\1\4"+
    "\6\5\1\0\10\5\1\372\4\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\21\5\4\0\1\4"+
    "\6\5\1\0\4\5\1\373\10\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\21\5\4\0\1\4"+
    "\6\5\1\0\10\5\1\241\4\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\21\5\4\0\1\4"+
    "\6\5\1\0\12\5\1\227\2\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\5\5\1\76\13\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\374\11\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\375\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\21\5\4\0"+
    "\1\4\6\5\1\0\15\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\1\376\20\5\4\0\1\4"+
    "\6\5\1\0\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\16\5\1\207\2\5\4\0\3\246"+
    "\4\141\1\246\3\141\5\246\1\141\1\246\1\141\6\246"+
    "\1\143\5\246\1\141\1\246\1\0\2\246\2\141\5\246"+
    "\1\141\22\246\1\141\1\246\1\141\3\246\1\141\1\246"+
    "\1\141\4\246\3\146\4\36\1\146\3\36\5\146\1\36"+
    "\1\146\1\36\13\146\1\256\1\36\2\146\1\257\1\146"+
    "\2\36\5\146\1\36\22\146\1\36\1\146\1\36\3\146"+
    "\1\36\1\146\1\36\4\146\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\1\5\1\74\17\5\4\0\7\66\1\0\6\66\1\377"+
    "\6\66\11\0\3\66\2\0\3\66\2\0\1\66\1\377"+
    "\1\0\1\66\1\0\3\66\4\0\1\66\1\0\21\66"+
    "\4\0\7\66\1\0\5\66\1\377\7\66\11\0\3\66"+
    "\2\0\3\66\2\0\1\377\1\66\1\0\1\66\1\0"+
    "\3\66\4\0\1\66\1\0\21\66\4\0\7\4\1\0"+
    "\3\4\1\u0100\11\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\21\4\4\0\7\4\1\0\3\4\1\u0101\11\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\21\4\4\0\7\4\1\0"+
    "\1\4\1\u0102\13\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\21\4\4\0\7\4\1\0\1\4\1\u0101\13\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\21\4\4\0\7\4\1\0"+
    "\6\4\1\u0103\6\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\21\4\4\0\7\4\1\0\14\4\1\u0102\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\1\4\1\0\21\4\16\0\1\u0104\110\0\1\u0105"+
    "\121\0\1\u0106\103\0\1\u0107\3\0\1\355\116\0\1\u0108"+
    "\102\0\1\u0107\117\0\1\352\110\0\1\u0109\77\0\1\4"+
    "\6\5\1\0\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\1\u010a\20\5\34\0\1\u010b\63\0"+
    "\1\363\1\u010c\4\363\1\u010c\15\363\3\u010c\1\363\1\u010c"+
    "\2\0\2\u010c\1\0\2\363\2\0\3\363\1\0\1\u010c"+
    "\2\363\1\u010c\1\363\1\0\1\u010c\1\363\5\u010c\1\363"+
    "\1\u010c\21\363\2\0\1\u010c\20\0\1\306\45\0\1\362"+
    "\55\0\1\u010d\63\0\1\366\1\u010e\4\366\1\u010e\15\366"+
    "\3\u010e\1\366\1\u010e\2\0\2\u010e\1\0\2\366\2\0"+
    "\3\366\1\0\1\u010e\2\366\1\u010e\1\366\1\0\1\u010e"+
    "\1\366\5\u010e\1\366\1\u010e\21\366\2\0\1\u010e\20\0"+
    "\1\312\45\0\1\365\25\0\1\4\6\5\1\0\6\5"+
    "\1\241\6\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\1\u010f\20\5\4\0\1\4\6\5\1\0\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\74\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\0\4\5\1\216\14\5"+
    "\4\0\1\4\6\5\1\0\4\5\1\u0110\10\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\2\5\1\207\4\5\1\207"+
    "\5\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\4\0\1\4\6\5\1\0\14\5\1\u0111"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\21\5\4\0\7\4\1\0\4\4\1\344\10\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\21\4\4\0\7\4\1\0"+
    "\2\4\1\u0102\12\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\1\4\1\0"+
    "\21\4\4\0\7\4\1\0\5\4\1\u0112\7\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\21\4\17\0\1\u0113\112\0"+
    "\1\u0114\110\0\1\u0115\112\0\1\u0114\117\0\1\u0116\120\0"+
    "\1\u0115\66\0\1\4\6\5\1\0\4\5\1\74\10\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\21\5\34\0\1\363\112\0\1\366\62\0\1\4\6\5"+
    "\1\0\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\3\5\1\74\15\5\4\0\1\4\6\5"+
    "\1\0\5\5\1\206\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\21\5\4\0\1\4\5\5"+
    "\1\u0117\1\0\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\u0118\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\6\5\1\u0119\2\5\1\u011a\3\5"+
    "\1\u011b\3\5\4\0\7\4\1\0\1\344\14\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\1\4\1\0\21\4\20\0\1\u0106\110\0"+
    "\1\u0115\115\0\1\u011c\75\0\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\7\5\1\u011d\11\5\4\0\1\4\6\5\1\0\12\5"+
    "\1\u011e\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\21\5\4\0\1\4\6\5\1\0\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\0"+
    "\1\u011f\20\5\4\0\1\4\6\5\1\0\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\2\5"+
    "\1\u0120\16\5\4\0\1\4\6\5\1\0\12\5\1\165"+
    "\2\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\21\5\14\0\1\u0106\102\0\1\4\6\5\1\0"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\u0121\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\10\5\1\u0122\1\5\1\u0123\1\u0124\1\u0125\4\5"+
    "\4\0\1\4\6\5\1\0\6\5\1\u0126\6\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\5\5\1\244\7\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\0\21\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\u0127\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\21\5\4\0"+
    "\1\4\6\5\1\0\6\5\1\u0128\6\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\0\21\5\4\0"+
    "\1\4\6\5\1\0\15\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\2\5\1\u0129\16\5\4\0"+
    "\1\4\6\5\1\0\15\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\u012a\1\0\21\5\4\0\1\4\6\5"+
    "\1\0\4\5\1\227\10\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\21\5\4\0\1\4\6\5"+
    "\1\0\14\5\1\u012b\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\21\5\4\0\1\4\6\5\1\0"+
    "\7\5\1\244\5\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\21\5\4\0\1\4\5\5\1\u0117"+
    "\1\0\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\15\5\1\u011b\3\5\4\0\1\4\6\5"+
    "\1\0\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\2\5\1\u012c\16\5\4\0\1\4\6\5"+
    "\1\0\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\2\5\1\230\16\5\4\0\1\4\6\5"+
    "\1\0\12\5\1\320\2\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\0\21\5\4\0\1\4\6\5"+
    "\1\0\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\0\1\u012d\20\5\4\0\1\4\6\5\1\0"+
    "\12\5\1\227\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\21\5\4\0\1\4\6\5\1\0"+
    "\3\5\1\u012e\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\21\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\u012f\10\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\0\21\5\4\0\1\4\6\5\1\0"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\0\4\5\1\207\14\5\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\21\1\1\11\4\1\1\11\2\1\1\11\6\1"+
    "\1\11\1\1\1\11\7\1\1\11\5\1\1\11\51\1"+
    "\1\0\2\11\2\1\1\11\3\1\1\11\12\1\1\0"+
    "\4\1\3\0\1\11\5\0\1\1\1\0\45\1\1\11"+
    "\7\1\1\11\14\1\6\0\3\1\10\0\1\1\1\0"+
    "\31\1\10\0\2\1\1\0\1\1\2\0\1\1\1\0"+
    "\14\1\6\0\1\1\4\0\4\1\2\0\1\11\1\0"+
    "\5\1\1\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public CCompactTokenMaker() {   
   }

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   

   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   

   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   

      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   

      // Start off in the proper state.   
      int state = Token.NULL;   
      switch (initialTokenType) {   
                  case Token.COMMENT_MULTILINE:   
            state = MLC;   
            start = text.offset;   
            break;   

         /* No documentation comments */   
         default:   
            state = Token.NULL;   
      }   

      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   

   }   

   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   

   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */   
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos /*= zzPushbackPos*/ = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CCompactTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CCompactTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill_old() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset_old(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { addToken(Token.PREPROCESSOR);
          }
        case 30: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 31: break;
        case 24: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 32: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 33: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 34: break;
        case 9: 
          { addToken(Token.WHITESPACE);
          }
        case 35: break;
        case 26: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 36: break;
        case 18: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 37: break;
        case 25: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 38: break;
        case 14: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 39: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 40: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 41: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 42: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 43: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 44: break;
        case 22: 
          { addToken(Token.FUNCTION);
          }
        case 45: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 46: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 47: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 48: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 49: break;
        case 19: 
          { addToken(Token.ERROR_CHAR);
          }
        case 50: break;
        case 20: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 51: break;
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 52: break;
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 54: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 56: break;
        case 10: 
          { 
          }
        case 57: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 304: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 305: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 306: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
