$package=cmm.compiler

import java.util.ArrayList;

/*-------------------------------------------------------------------------
CMM Compiler description for C--
=== ============================
-------------------------------------------------------------------------*/

COMPILER CMM

  public  Tab       tab;                     // symbol table
  public  boolean[] debug;
  
  Obj curProc;

//--- LL(1) conflict resolvers

	// Returns true if a VarDecl comes next in the input
	boolean isVarDecl() { 
		if (la.kind == _ident || la.val.equals("int") || la.val.equals("float") || la.val.equals("char")) {
			Token x = scanner.Peek();
			while (x.kind != _semicolon) {
				if (x.kind == _EOF || x.kind == _lpar || x.kind == _assign) return false;
				x = scanner.Peek();
			}
			return true;
		}
		return false;
	}
	
	// Returns true if the next input is an Expr and not a '(' Condition ')'
	boolean isExpr() { 
		if (la.kind == _bang) return false;
		else if (la.kind == _lpar) {
			Token x = scanner.Peek();
			while (x.kind != _rpar && x.kind != _EOF) {
				if (x.kind == _eql || x.kind == _neq || x.kind == _lss || x.kind == _leq || x.kind == _gtr || x.kind == _geq) return false;
				x = scanner.Peek();
			}
			return x.kind == _rpar;
		} else return true;
	}
	
	// Returns true if the next input is a type cast (requires symbol table)
	boolean isCast() {
		Token x = scanner.Peek();
		if (x.kind != _ident) return false;
		Obj obj = tab.find(x.val);
		return obj.kind == Obj.TYPE;
	}

/*-------------------------------------------------------------------------*/

CHARACTERS
  letter    = 'A'..'Z' + 'a'..'z'.
  digit     = '0'..'9'.
  hex       = digit + 'a'..'f' + 'A'..'F'.
  charCh    = ANY - '\r' - '\n' - '\t' - '\'' - '\\'.

TOKENS
  ident     = letter { letter | digit }.
  intCon    = digit { digit }
            | ('0'('x'|'X') | '#') hex {hex}.
  floatCon  = digit {digit} '.' {digit} [('E'|'e') ['+'|'-'] digit {digit}].
  charCon   = '\'' ( charCh | '\\' ('r' | 'n' | 't' | '\'' | '\\' )) '\''.
  
  //--- token definitions for lookahead peeking
  lpar      = "(".
  rpar      = ")".
  semicolon = ";".
  assign    = '='.
  eql       = "==".
  neq       = "!=".
  lss       = "<".
  leq       = "<=".
  gtr       = ">".
  geq       = ">=".
  bang      = "!".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n'

IGNORE "\t\r\n"

//-------------------------------------------------------------------------

PRODUCTIONS

CMM
=	                          		(. tab = new Tab(this); 
                                       tab.openScope(); .)
{ 
( ConstDecl 
| StructDecl 
| IF(isVarDecl()) VarDecl 
| ProcDecl 
) SYNC
}                                 	(. if (debug[0]) tab.dumpScope(tab.curScope.locals, 0);
									   tab.checkIfForwardsResolved(tab.curScope); .)
.
//-------------------------------------------------------------------------
ConstDecl							(. Struct type; .)
=
"const"
Type<out type>
ident								(. Obj curCon = tab.insert(Obj.CON, t.val, type); .)
"=" 
( intCon 							(. curCon.val = tab.intVal(t.val); 
                                       if (type != Tab.intType) SemErr("int constant not allowed here"); .)
| floatCon 							(. curCon.fVal = tab.floatVal(t.val); 
									   if (type != Tab.floatType) SemErr("float constant not allowed here"); .)
| charCon 							(. curCon.val = tab.charVal(t.val); 
									   if (type != Tab.charType) SemErr("char constant not allowed here"); .)
)
";"	
.
//-------------------------------------------------------------------------
VarDecl                          	(. Struct type; .)
= 
Type<out type>
ident                             	(. tab.insert(Obj.VAR, t.val, type); .)
{ "," 
  ident								(. tab.insert(Obj.VAR, t.val, type); .)
} ";"		
.
//-------------------------------------------------------------------------
StructDecl
= 
"struct"                          	(. Struct type = new Struct(Struct.STRUCT); .)
ident                             	(. tab.insert(Obj.TYPE, t.val, type); .)
"{"                               	(. tab.openScope(); .)
{ VarDecl
} 
"}"                                	(. type.fields = tab.curScope.locals;
                                       type.size = tab.curScope.size;
                                       if(type.fields==null) SemErr("struct must contain at least one variable");
                                       tab.closeScope(); .)
.
//-------------------------------------------------------------------------
ProcDecl                          	(. Struct type = Tab.noType; .)
= 									(. int line = la.line; .)
( Type<out type>
| "void"
)
ident								(. curProc = tab.insert(Obj.PROC, t.val, type); 
									   if(type != Tab.noType && !type.isPrimitive()) 
									   		SemErr("procedure must return a primitive type or void"); .)
"("									(. tab.openScope(); .)
[ FormPars<out curProc.nPars>
]
")"
( "{"								(. if(curProc.isForward) {
											tab.checkForwardParams(curProc.locals,tab.curScope.locals);
									   		if(curProc.type != type)
									   			SemErr("return value of forware declaration does not match declaration");
									   		curProc.isForward = false;
									   }
									   Node startNode = null, curNode = null, newNode; .)
  { ConstDecl
  | IF(isVarDecl()) VarDecl
  | Statement<out newNode> 			(. if(startNode == null) {
  									       startNode = newNode;
  									   } else {
  									       curNode.next = newNode;  
  									   } 
  									   curNode = newNode; .)
  }
  "}"                               (. if(curProc.type != Tab.noType) {
  									       if(startNode == null) {
	  									       startNode = new Node(Node.TRAP,null,null,t.line);
	  									   } else {
	  									       curNode.next = new Node(Node.TRAP,null,null,t.line);
	  									   }
  									   }
  									   curProc.ast = new Node(Node.STATSEQ,startNode,null,line); 
  									   if (debug[1]) Node.dump(curProc.ast, 0); .)
| ";" "forward" ";"					(. if(curProc.isForward) SemErr("function is already forward declared");
									   curProc.isForward = true; .)
)									(. curProc.locals = tab.curScope.locals;
									   curProc.size = tab.curScope.size;
									   tab.closeScope(); .)
.
//-------------------------------------------------------------------------
FormPars<out int n>
= 
FormPar                              (. n = 1; .)
{ "," 
  FormPar                            (. n++; .)
}.
//-------------------------------------------------------------------------
FormPar								(. Struct type; 
									   boolean isRef = false; .)
= 
[ "ref"								(. isRef = true; .)
]
Type<out type>
ident								(. Obj curRef = tab.insert(Obj.VAR, t.val, type); 
									   curRef.isRef = isRef;
									   if(!type.isPrimitive()) 
									   		SemErr("var must be a primitive type"); .)
.
//-------------------------------------------------------------------------
Type<out Struct type>
= 
ident                            	(. Obj obj = tab.find(t.val);
									   if(obj.kind != Obj.TYPE) SemErr(obj.name + " is not a type");
                                       type = obj.type; 
                                       ArrayList<Integer> dimensions = new ArrayList(); .)
{ "[" 
  intCon 							(. int arraySize = tab.intVal(t.val);
  									   dimensions.add(arraySize); 
  									   if(arraySize <= 0) SemErr("array-size must be 1 or higher"); .)
  "]" }
									(. for(int i = dimensions.size()-1; i>=0;i--) {
									       type = new Struct(Struct.ARR, dimensions.get(i), type);
									   } .)
.
//-------------------------------------------------------------------------
Statement<out Node st>				(. Node design; 
                      				   Node e, con; .)
=                                   (. st = null; 
                                       int line = la.line; .)
( Designator<out design>				
  ( "=" Expr<out e> 				(. if(design.kind != Node.IDENT) SemErr("name must be an identifier"); 
  									   e = tab.impliciteTypeCon(e, design.type);
  									   st = new Node(Node.ASSIGN,design,e,line); .)
  | ActPars<out e>                  (. if(design.type != Tab.noType) SemErr("only void is allowed"); 
  									   st = new Node(Node.CALL,e,null,line); 
  									   tab.checkFunctionParams(design.obj,st);.) 
  ) ";"
| "if" "(" 							(. Node ifYes, ifNo; .)
	Condition<out con>
	")" 
	Statement<out ifYes> 			(. st = new Node(Node.IF,con,ifYes,line); .)
	["else" Statement<out ifNo> 	(. st = new Node(Node.IFELSE,st,ifNo,line); .)
	]
| "while" "(" Condition<out con>
	")" Statement<out st> 			(. st = new Node(Node.WHILE,con,st,line); .)
| "print" "(" Expr<out e> 			(. e = tab.impliciteTypeCon(e, Tab.charType);
									   st = new Node(Node.PRINT,e,null,line); .)
 ")" ";"
| "{" {Statement<out st> 			(. st = new Node(Node.STATSEQ,st,null,line); .)
	} "}"
| "return" Expr<out e>
 ";"								(. if(curProc.type.kind == Struct.NONE) SemErr("procedure has void as return type");
 						   			   e = tab.impliciteTypeCon(e, curProc.type);
 						   			   st = new Node(Node.RETURN,e,null,line); .)
| ";"								(. st = null; .)
).
//-------------------------------------------------------------------------
ActPars<out Node outPar>			(. Node par, curPar = null; .)
= 									(. outPar = null; .)
"(" 
[ ActPar<out outPar> 
  { "," 
  ActPar<out par> 					(. curPar.next = par;
  									   curPar = par; .)
  }
] 
")".
//-------------------------------------------------------------------------
ActPar<out Node e>
= 									(. e = null; .)
(Expr<out e>
| "ref"
  Expr<out e> 						(. if(tab.isCastOperator(e.kind)) SemErr("there is no type-conversation for ref-parameter(s) allowed"); 
  									   else e = new Node(Node.REF, e, null, e.obj.type); .)
).
//-------------------------------------------------------------------------
Condition<out Node con>				(. Node newCon; .)
= 
CondTerm<out con>
{ "||"								
  CondTerm<out newCon>				(. con = new Node(Node.OR, con, newCon, Tab.boolType); .)
}.
//-------------------------------------------------------------------------
CondTerm<out Node con>	
= 
CondFact<out con> 					
{ "&&" 								(. Node con2; .)
  CondFact<out con2>				(. con = new Node(Node.AND, con, con2, Tab.boolType); .)
}.
//-------------------------------------------------------------------------
CondFact<out Node con>				(. Node e; int kind; .)
=									(. con = null; .)
( IF (isExpr()) Expr<out con>
  Relop<out kind>
  Expr<out e>						(. if(!con.type.isPrimitive() || !e.type.isPrimitive())
             						   		SemErr("type is not a primitive");
  									   con = tab.doImplicitCastByAritmetic(con, con.type, e.type);
  									   e = tab.doImplicitCastByAritmetic(e, con.type, e.type);
  									   con = new Node(kind,con,e,Tab.boolType); .)
| "!" "(" 
  Condition<out con> 				(. con = new Node(Node.NOT, con, null, Tab.boolType); .)
  ")"
| "(" Condition<out con> ")"
).
//-------------------------------------------------------------------------
Relop<out int kind>
=									(. kind = Node.EQL; .)
("=="								(. kind = Node.EQL; .)
| "!=" 								(. kind = Node.NEQ; .)
| ">" 								(. kind = Node.GTR; .)
| ">=" 								(. kind = Node.GEQ; .)
| "<" 								(. kind = Node.LSS; .)
| "<="								(. kind = Node.LEQ; .)
).
//-------------------------------------------------------------------------
Expr<out Node res>					(. int kind;
                  					   Node n; .)
=
Term<out res>
{ Addop<out kind>
  Term<out n>						(. if(!res.type.isPrimitive() || !n.type.isPrimitive())
             						   		SemErr("type is not a primitive");
             						   res = tab.doImplicitCastByAritmetic(res, res.type, n.type);
             						   n = tab.doImplicitCastByAritmetic(n, res.type, n.type);
             						   res = new Node(kind, res, n , res.type); .)
}
.
//-------------------------------------------------------------------------
Term<out Node res>					(. int kind; 
                					   Node n; .)
= 
Factor<out res> 
{ Mulop<out kind>
  Factor<out n>						(. if(!res.type.isPrimitive() || !n.type.isPrimitive())
             						   		SemErr("type is not a primitive");
             						   res = tab.doImplicitCastByAritmetic(res, res.type, n.type);
             						   n = tab.doImplicitCastByAritmetic(n, res.type, n.type);
  									   res = new Node(kind, res, n, n.type); .)
}
.
//-------------------------------------------------------------------------
Factor<out Node n>					(. Struct type; 
                  					   Node design; .)
=									(. n = null; 
									   int line = la.line; .)
( Designator<out design>			
	[ ActPars<out n> 				(. if(design.obj.kind != Obj.PROC ) SemErr("name is not a procedure"); 
									   if(design.obj.type == Tab.noType) SemErr("function call of a void procedure"); 
									   n = new Node(Node.CALL,n,null,line); 
									   n.type = design.obj.type; 
									   tab.checkFunctionParams(design.obj,n); .)
	]								(. if (n == null) n = design; .)
| intCon							(. n = new Node(tab.intVal(t.val)); .)
| floatCon							(. n = new Node(tab.floatVal(t.val)); .)
| charCon							(. n = new Node(tab.charVal(t.val)); .)
| "read" "(" ")"					(. n = new Node(Node.READ,null,null, tab.charType); .)
| "-" Factor<out n> 				(. n = new Node(Node.MINUS,n,null,n.type); .)
| "+" Factor<out n> 				(. n = new Node(Node.PLUS,n,null,n.type); .)
| IF (isCast())						
  "(" 
  Type<out type>
  ")"
  Factor<out n> 					(. n = tab.expliciteTypeCon(n, type); .)
| "("
	Expr<out n>
 ")"
).
//-------------------------------------------------------------------------
Designator<out Node n>				(. Obj obj; Node e; .)
= 
ident								(. String name = t.val;
                                       obj = tab.find(name); 
                                       n = new Node(obj); .)
{ "."								(. if(obj.type.kind != Struct.STRUCT) SemErr(name + " is not a struct"); .)
  ident								(. obj = tab.findField(t.val,obj.type); 
  									   n = new Node(Node.DOT, n, new Node(obj.adr), obj.type); .)
| "["								(. if(obj.type.kind != Struct.ARR) SemErr(name + " is not an array"); .)
  Expr<out e> 						(. if(e.type.kind != Struct.INT) SemErr("index must be an int");
  									   n = new Node(Node.INDEX, n, e, obj.type); .)
  "]"
}
.
//-------------------------------------------------------------------------
Addop<out int kind>
=									(. kind=Node.PLUS; .) 
( "+"									
| "-"								(. kind=Node.MINUS; .) 
).
//-------------------------------------------------------------------------
Mulop<out int kind>
=									(. kind=Node.TIMES; .) 
( "*" 								
| "/" 								(. kind=Node.DIV; .) 
| "%"								(. kind=Node.REM; .) 
).
END CMM.
